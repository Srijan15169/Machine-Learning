# -*- coding: utf-8 -*-
"""Python_DS_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_gD6bJPVnyY9ZbUv3o5EIBI7qjX5l6Fq

#Numpy
"""

#Numpy

a = [7,9,4,2,1,3]
print(a * 2)

b = []
for i in a:
  b.append(i * 2)
print(b)

c = [[7,9,4,2,1,3] , [4,7,3,2,1,8] , [5,9,9,1,2,4]]
print(c)

import numpy as np

n1 = np.array([7,9,4,2,1,3])

print(n1)

print(n1 * 2)

n2 = np.array([[7,9,4,2,1,3] , [4,7,3,2,1,8] , [5,9,9,1,2,4]])
print(n2)

print(n2.shape)
print(n2.size)
print(n2.ndim)

#numpy[row,column]
print(n2[0,0])

print(n2[1,2])

print(n2)

print(np.sum(n2))
print(np.prod(n2))
print(np.max(n2))
print(np.min(n2))
print(np.mean(n2))
print(np.std(n2))
print(np.argmax(n2))
print(np.argmin(n2))

print(n2)

print(np.sum(n2 , axis = 0))
print(np.prod(n2 , axis = 0))
print(np.max(n2 , axis = 0))
print(np.min(n2 , axis = 0))
print(np.mean(n2 , axis = 0))
print(np.std(n2 , axis = 0))
print(np.argmax(n2 , axis = 0))
print(np.argmin(n2 , axis = 0))

print(n2)

print(np.sum(n2 , axis = 1))
print(np.prod(n2 , axis = 1))
print(np.max(n2 , axis = 1))
print(np.min(n2 , axis = 1))
print(np.mean(n2 , axis = 1))
print(np.std(n2 , axis = 1))
print(np.argmax(n2 , axis = 1))
print(np.argmin(n2 , axis = 1))

print(n2)

#Slicing - [row slicing , column slicing]
#[inital index : initial index + steps]
print(n2[0:1 , :])

print(n2[1:2 , :])

print(n2[2:3 , :])

print(n2[0:0+2 , :])

print(n2)

print(n2[: , 2:4])

n3 = np.arange(0,36).reshape(6,6)
print(n3)

print(n3[3:6 , :])

print(n3[: , 3:5])

n4 = n3[2:5,1:5].copy()
print(n4)

n4[1,1] = 222

print(n4)

print(n3)

#Dot product of numpy array
n5 = np.array([ [2,3,4,5] , [3,5,7,8] , [2,4,7,8]])
print(n5)

n6 = np.array([[2,3,4,5]])
print(n6)

print(n6.T)

np.dot(n5,n6.T)

#2x + 3y + z = 14
#x + 2y + z = 4
#3x + y + 3z = 7

A = np.array([[2,3,1] , [1,2,1] , [3,1,3]])
print(A)

X = np.array([['x'],['y'],['z']])
print(X)

B = np.array([[14],[4],[7]])
print(B)

#A.X = B
#X = A_inv.B

A_inv = np.linalg.inv(A)

X = np.dot(A_inv,B)
print(X)

print(np.dot(A,X))

print(np.zeros([3,4]))

print(np.ones([3,4]))

print(np.eye(4))

#Stacking
a = np.array([[4,5,6,3,2] , [1,6,8,4,2] , [4,9,7,5,4]])
b = np.array([[2,5] ,[5,8] , [9,8]])

print(a)

print(b)

#Horizontal stackinh
np.hstack((a,b))

c = np.array([[5,9,6,2,3]])
print(c)

np.vstack((a,c))

"""#Pandas"""

import pandas as pd

df = pd.DataFrame(a , columns=['a','b','c','d','e'])
df

df[['a','d' , 'e']]

df.loc[1]

#loc
df.loc[(0,2) , ('a','c','e')]

df.loc[0:2 , 'a':'c']

df = pd.read_csv('http://bit.ly/kaggletrain')   #Data of passangers on titanic

df.head()

df.shape

df.columns

#null values
df.isnull().sum()

df.shape

df1 = df.drop('Cabin',axis='columns')    #Droppped the cabin column contain large numbers of null values

df1.head()

df1.isnull().sum()

df1['Age'].mean()

#Average age of male and female
df1.groupby('Sex')['Age'].mean()

df1.groupby('Pclass')['Age'].mean()

#Data filtering
#dfp1,dfp2,dfp3

dfp1 = df1[df1['Pclass'] == 1]
dfp2 = df1[df1['Pclass'] == 2]
dfp3 = df1[df1['Pclass'] == 3]

print(dfp1['Age'].isnull().sum())
print(dfp2['Age'].isnull().sum())
print(dfp3['Age'].isnull().sum())

dfp1.head()

dfp1['Age'] = dfp1['Age'].fillna(38.23)   #to fill null values in a data column
dfp2['Age'] = dfp2['Age'].fillna(29.87)
dfp3['Age'] = dfp3['Age'].fillna(25.14)

df2 = pd.concat((dfp1,dfp2,dfp3))

df2.isnull().sum()

df2.shape

#Drop the rows will null values
df3 = df2.dropna(axis='rows') #drop the rows with null values

df3.isnull().sum()

df3.head()

df3.dtypes

#Different unique category in a column
df3['Survived'].unique()

df3['Survived'].value_counts()

df3['Pclass'].unique()

df3['Pclass'].value_counts()

df3['Sex'].unique()

df3['Sex'].value_counts()

df3['Embarked'].unique()

df3['Embarked'].value_counts()

df3['Sex'] = df3['Sex'].map({'female':0, 'male':1})

df3.head()

df3['Embarked'] = df3['Embarked'].map({'C':0, 'S':1, 'Q':2})

df3.head()

#Find out the average,minimum & Maximum fare paid by each class of passanger
df1.groupby('Pclass')['Fare'].mean()

name = 'Sloper, Mr. William Thompson'
name.split(',')

name.split(',')[0]

def surname(x):
  return x.split(',')[0]

surname('Sloper, Mr. William Thompson')

sn = df3['Name'].apply(surname)

df3.insert(4,'Surname',sn)

df3.head()

